#Использовать gitrunner 
#Использовать logos
#Использовать gitsync

// ----------- глобальные переменные ------------
Перем StoragePath, StorageUser, StoragePwd;
Перем WorkDir, GitRemote, Branch;
Перем Log;
Перем Cmd;
Перем Repo;

// ----------- служебная процедура --------------
Процедура Run(Команда, Каталог)
    Log.Информация("► " + Команда);
    Проц = СоздатьПроцесс("cmd /c " + Команда, Каталог, Истина, Истина);
    Проц.Запустить();   
    Проц.ОжидатьЗавершения();
    Если Проц.Завершен И Проц.КодВозврата > 1 Тогда
        ВызватьИсключение "Команда '" + Команда + "' завершилась кодом " + Строка(Проц.КодЗавершения);
    КонецЕсли;
КонецПроцедуры

// ----------- блок инициализации ---------------
StoragePath = "G:\1c_bases\BSP_2_STORAGE";
StorageUser = "MSK";
StoragePwd  = "";

WorkDir   = "G:\1c_bases\BSP_GIT_2\BSP_TEST";
GitRemote = "origin";
Branch    = "master";

Log = Логирование.ПолучитьЛог("EXPORT");

// ----------- основная логика ------------------

// 1. синхронизация из хранилища (инкремент)
Cmd = СтрШаблон(
        "gitsync sync --storage-user %1 --storage-pwd %2 %3 %4",
        StorageUser, StoragePwd, StoragePath, WorkDir);
Run(Cmd, WorkDir);

// 2. git add / commit / push
Repo = Новый ГитРепозиторий();  
Repo.УстановитьРабочийКаталог(WorkDir);
Repo.ДобавитьФайлВИндекс(".");
Попытка
    Repo.Закоммитить("Auto export from storage", Истина);
Исключение
    Log.Дебаг("Нет изменений для коммита");
КонецПопытки;

Repo.Отправить(GitRemote, Branch);
Log.Информация("✓ Выгрузка завершена");
