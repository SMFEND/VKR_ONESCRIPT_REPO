#Использовать gitrunner
#Использовать v8runner
#Использовать logos

// Глобальные переменные
Перем RepoDir, Branch, ArchiveDir, BackupDir;
Перем CFFile, IBConn, Log, Now;

Перем ПараметрыБлокировкиCеансов;


// Вспомогательная процедура: исполнение shell-команд
Процедура Sh(Команда)
    Log.Информация("▶ " + Команда);
    P = СоздатьПроцесс("cmd /c " + Команда, "", Истина, Истина);
    P.Запустить();  
    P.ОжидатьЗавершения();
    // 0 - ОК, 1 - «ничего нового» от git; >1 - ошибка
    Если P.Завершен И P.КодВозврата > 1 Тогда
        ВызватьИсключение "Ошибка " + Строка(P.КодЗавершения) + " при '" + Команда + "'";
    КонецЕсли;
КонецПроцедуры

  // вспомогательная функция: «существует ли файл» на базе НайтиФайлы
Функция FileExists(Каталог, ИмяФайла)
    Возврат НайтиФайлы(Каталог, ИмяФайла, Ложь).Количество() > 0;
КонецФункции

Функция GetHeadHash() Экспорт

     Команда = "git -C " + RepoDir + "\ rev-parse HEAD";   // команда для получения хэша
     P = СоздатьПроцесс("cmd /c " + Команда, "", Истина, Истина);
     P.Запустить();  
     P.ОжидатьЗавершения();
     Если P.КодВозврата > 1 Тогда
         ВызватьИсключение "git rev-parse завершился кодом " + Строка(P.КодВозврата);
     КонецЕсли;
     Возврат P.ПотокВывода.ПрочитатьСтроку();   // SHA хэш

КонецФункции

// Разовая функция-обёртка: создать каталог через `mkdir`, если его ещё нет
Процедура EnsureDir(Путь)
	Sh("if not exist \" + Путь + "\ mkdir \" + Путь + "\");
КонецПроцедуры

Функция УстановитьБлокировкуСоединений(ПараметрыПодключения) Экспорт	
		
	Если НЕ ПараметрыБлокировкиCеансов.БлокироватьСеансыИБ Тогда 	
		Возврат Истина;
	КонецЕсли;

	Log.Информация(НСтр("ru = 'Завершение работы пользователей и установка запрета на подключение новых соединений.'"));
	
	// Получение параметров информационной базы
	Соединение = УстановитьВнешнееСоединениеСБазой(ПараметрыПодключения);   
	Если Соединение = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;     
		
	Попытка

		Соединение.СоединенияИБ.УстановитьБлокировкуСоединений(
			НСтр("ru = 'в связи с необходимостью обновления конфигурации.'"), "ПакетноеОбновлениеКонфигурацииИБ");
		ДатаСтарта = Соединение.СоединенияИБ.ПараметрыБлокировкиСеансов().Начало;
		
		Если ПараметрыБлокировкиCеансов.ИспользованиеИБ Тогда
			Интервал = Соединение.СоединенияИБ.ПараметрыБлокировкиСеансов().ИнтервалОжиданияЗавершенияРаботыПользователей * 1000;
		Иначе	
			Интервал = ПараметрыБлокировкиCеансов.ИнтервалОжидания;
		КонецЕсли;
			
		Log.Отладка(СтрШаблон(НСтр("ru = 'Параметры блокировки сеансов:
			|	Интервал ожидания завершения работы пользователей - %1 сек
			|	Дата старта - %2'"), Интервал, ДатаСтарта));
		
		Если Соединение.ЗначениеЗаполнено(ДатаСтарта) Тогда
				
			Пока ТекущаяДата() - Интервал <= ДатаСтарта Цикл 
				
				Если НЕ Соединение.СоединенияИБ.УстановленаБлокировкаСоединений() 
				   ИЛИ Соединение.СоединенияИБ.КоличествоСеансовИнформационнойБазы(Ложь) <= 1 Тогда
					Прервать;
				КонецЕсли;
				
				Приостановить(15 * 1000); // Ждем 15 секунд до следующей проверки.

			КонецЦикла;
					
			Log.Отладка(СтрШаблон(НСтр("ru = 'Задержка: %1 сек'"), ТекущаяДата() - ДатаСтарта));

		КонецЕсли;
					
		Если НЕ Соединение.СоединенияИБ.УстановленаБлокировкаСоединений() Тогда
			Log.Ошибка(НСтр("ru = 'Попытка завершения работы пользователей завершилась безуспешно: отменена блокировка ИБ.'"));
			ОсвободитьОбъект(Соединение);
 			ВыполнитьСборкуМусора();
			Соединение = Неопределено;
			ОжидатьЗавершения(ПараметрыПодключения);
			Возврат Ложь;
		КонецЕсли;
				
		Если Соединение.СоединенияИБ.КоличествоСеансовИнформационнойБазы(Ложь) <= 1 Тогда
			Log.Отладка(НСтр("ru = 'Установка запрета на подключение новых соединений выполнена.
				|Все пользователи завершили работу.'"));
			ОсвободитьОбъект(Соединение);
 			ВыполнитьСборкуМусора();
			Соединение = Неопределено;
			ОжидатьЗавершения(ПараметрыПодключения);
			Возврат Истина;
		КонецЕсли;
			
		Log.Отладка(НСтр("ru = 'Принудительное прерывание соединений пользователей.'"));

		// после начала блокировки сеансы всех пользователей должны быть отключены	
		// если этого не произошло пробуем принудительно прервать соединение.
		ПараметрыАдминистрирования = Соединение.СтандартныеПодсистемыСервер.ПараметрыАдминистрирования();
		ПараметрыАдминистрирования.ПарольАдминистратораИнформационнойБазы = ПараметрыПодключения.ПарольПользователя;
		ПараметрыАдминистрирования.ПарольАдминистратораКластера = ПараметрыПодключения.ПарольПользователя;
		Соединение.СоединенияИБКлиентСервер.УдалитьВсеСеансыКромеТекущего(ПараметрыАдминистрирования);
				
		Если Соединение.СоединенияИБ.КоличествоСеансовИнформационнойБазы(Ложь) > 1 Тогда 
			Соединение.СоединенияИБ.РазрешитьРаботуПользователей();
			Log.Ошибка(Соединение.СоединенияИБ.СообщениеОНеотключенныхСеансах());
			ОсвободитьОбъект(Соединение);
 			ВыполнитьСборкуМусора();
			Соединение = Неопределено;
			ОжидатьЗавершения(ПараметрыПодключения);
			Возврат Ложь;
		КонецЕсли;
	
	Исключение
		Log.Ошибка(СтрШаблон(НСтр("ru = 'Ошибка при установке запрета на подключение новых соединений.
			|%1'"), ИнформацияОбОшибке()));
		ОсвободитьОбъект(Соединение);
		ВыполнитьСборкуМусора();
		Соединение = Неопределено;
		ОжидатьЗавершения(ПараметрыПодключения);
		Возврат Истина;
	КонецПопытки;
			
	ОсвободитьОбъект(Соединение);
 	ВыполнитьСборкуМусора();
	Соединение = Неопределено;
	ОжидатьЗавершения(ПараметрыПодключения);

	Log.Отладка(НСтр("ru = 'Установка запрета на подключение новых соединений выполнена.
		|Работа всех пользователей прервана.'"));
	
	Возврат Истина;
		
КонецФункции

Функция УстановитьВнешнееСоединениеСБазой(Знач ПараметрыПодключения) 
	
	ИмяCOMСоединителя = "V" + ПараметрыПодключения.ВерсияПлатформы + ".COMConnector";
	Попытка
		COMОбъект = Новый COMОбъект(ИмяCOMСоединителя);
	Исключение
		Log.Ошибка(СтрШаблон(НСтр("ru = 'Не удалось подключится к другой программе:
			|%1'"), ИнформацияОбОшибке()));
		Возврат Неопределено;
	КонецПопытки; 
	
	ФайловыйВариантРаботы = ПараметрыПодключения.ВариантРаботыИнформационнойБазы = 0;
	
	// Формирование строки соединения.
	ШаблонСтрокиСоединения = "[СтрокаБазы][СтрокаАутентификации];UC=ПакетноеОбновлениеКонфигурацииИБ";
	
	Если ФайловыйВариантРаботы Тогда
		СтрокаБазы = "File = ""&КаталогИнформационнойБазы""";
		СтрокаБазы = СтрЗаменить(СтрокаБазы, "&КаталогИнформационнойБазы", ПараметрыПодключения.КаталогИнформационнойБазы);
	Иначе
		СтрокаБазы = "Srvr = ""&ИмяСервера1СПредприятия""; Ref = ""&ИмяИнформационнойБазыНаСервере1СПредприятия""";
		СтрокаБазы = СтрЗаменить(СтрокаБазы, "&ИмяСервера1СПредприятия",                     ПараметрыПодключения.ИмяСервера1СПредприятия);
		СтрокаБазы = СтрЗаменить(СтрокаБазы, "&ИмяИнформационнойБазыНаСервере1СПредприятия", ПараметрыПодключения.ИмяИнформационнойБазыНаСервере1СПредприятия);
	КонецЕсли;
	
	Если ПараметрыПодключения.АутентификацияОперационнойСистемы Тогда
		СтрокаАутентификации = "";
	Иначе
		
		Если СтрНайти(ПараметрыПодключения.ИмяПользователя, """") Тогда
			ПараметрыПодключения.ИмяПользователя = СтрЗаменить(ПараметрыПодключения.ИмяПользователя, """", """""");
		КонецЕсли;
		
		Если СтрНайти(ПараметрыПодключения.ПарольПользователя, """") Тогда
			ПараметрыПодключения.ПарольПользователя = СтрЗаменить(ПараметрыПодключения.ПарольПользователя, """", """""");
		КонецЕсли;
		
		СтрокаАутентификации = "; Usr = ""&ИмяПользователя""; Pwd = ""&ПарольПользователя""";
		СтрокаАутентификации = СтрЗаменить(СтрокаАутентификации, "&ИмяПользователя",    ПараметрыПодключения.ИмяПользователя);
		СтрокаАутентификации = СтрЗаменить(СтрокаАутентификации, "&ПарольПользователя", ПараметрыПодключения.ПарольПользователя);
	КонецЕсли;
	
	СтрокаСоединения = СтрЗаменить(ШаблонСтрокиСоединения, "[СтрокаБазы]", СтрокаБазы);
	СтрокаСоединения = СтрЗаменить(СтрокаСоединения, "[СтрокаАутентификации]", СтрокаАутентификации);
	
	Попытка
		Соединение = COMОбъект.Connect(СтрокаСоединения);
	Исключение
		Log.Ошибка(СтрШаблон(НСтр("ru = 'Не удалось подключится к другой программе:
			|%1'"), ИнформацияОбОшибке()));
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат Соединение;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Инициализация путей и каталогов
////////////////////////////////////////////////////////////////////////////////
RepoDir    = "G:\DevOps\repo";
Branch     = "master";

Log = Логирование.ПолучитьЛог("deploy");

ArchiveDir = "G:\DevOps\cf-archive";
BackupDir  = "G:\DevOps\backups";

IBConn     = "/FG:\Работа\Базы\BSP_TEST";   // ← поправьте при необходимости
Now        = Формат(ТекущаяДата(), "YYYYMMDD-HHmm");
CFFile     = ArchiveDir + "\app-" + Now + ".cf";
ПараметрыПодключения = "";

// Каталоги гарантированно существуют
EnsureDir(ArchiveDir);
EnsureDir(BackupDir);


Попытка
    Log.Дебаг("Устанавливаем монопольный режим...");
    УстановитьБлокировкуСоединений(ПараметрыПодключения);  // Функция для блокировки сеансов и запрета подключений
    Log.Дебаг("Монопольный режим успешно установлен.");
Исключение
    Log.Ошибка("Ошибка при установке монопольного режима: " + ИнформацияОбОшибке().Описание);
    ЗавершиРаботу(1);  // Завершаем работу при ошибке
КонецПопытки;

repo = Новый ГитРепозиторий();
repo.УстановитьРабочийКаталог(RepoDir);
repo.Получить("origin", Branch);

ТекущийХэш = GetHeadHash();

ПутьLast   = CombinePath(ArchiveDir, "last_commit.txt");
ПредХэш    = "";

СписокФайлов = НайтиФайлы(ArchiveDir, "last_commit.txt", Ложь); // false => без рекурсии
Если СписокФайлов.Количество() > 0 Тогда
    // файл существует, читаем
    TD = Новый ТекстовыйДокумент;
    TD.Прочитать(ПутьLast);               // в синтакс-помощнике раздел «ТекстовыйДокумент»
    Если TD.КоличествоСтрок() > 0 Тогда
        ПредХэш = TD.ПолучитьСтроку(1);
    КонецЕсли;
КонецЕсли;


Now    = Формат(ТекущаяДата(), "YYYYMMDD-HHmm");
CFFile = CombinePath(ArchiveDir, "app-" + Now + ".cf");
DTFile = CombinePath(ArchiveDir, "app-" + Now + ".dt");

Конфигуратор = Новый УправлениеКонфигуратором();
Конфигуратор.УстановитьКонтекст(IBConn, "Администратор", "");

Конфигуратор.ВыгрузитьКонфигурациюВФайл(CFFile);
Конфигуратор.ВыгрузитьКонфигурациюВФайл(DTFile);

Конфигуратор.ЗагрузитьКонфигурациюИзФайлов(RepoDir);
Конфигуратор.ВыполнитьСинтаксическийКонтроль();
Конфигуратор.ОбновитьКонфигурациюБазыДанных();

TD = Новый ТекстовыйДокумент;
TD.УстановитьТекст(ТекущийХэш);
TD.Записать(ПутьLast, КодировкаТекста.UTF8);


Log.Информация("✓ Deploy OK - commit " + Лев(ТекущийХэш, 8));